import {Injectable} from '@angular/core';

const WHITE_WINE_DATA = require('./wine/wine.quality.white.json');
const RED_WINE_DATA = require('./wine/wine.quality.red.json');
const WINE_CLASSIFY = require('./wine/wine.classify.json');


const whiteWine = {
  predict: `7 6 6 6 6 7 6 7 7 5 6 5 7 6 6 6 6 7 6 5 7 7 6 6 6 6 7 6 5 6 7 5 6 6 7 7 5 7 7 5 7 5 6 6 6 7 6 5 7 6 5 7 7 6 7 7 7 6 6 6 6 6 6 6 7 7 6 6 6 7 6 7 7 6 5 7 6 7 6 7 5 6 6 6 6 7 7 7 7 7 6 7 5 6 5 5 6 6 6 6 5 7 5 5 6 6 5 5 6 6 7 7 7 6 6 6 6 6 6 6 7 6 6 6 6 6 6 6 7 6 6 6 7 5 6 5 7 6 6 6 6 6 6 5 6 6 6 6 6 6 6 6 6 7 7 6 6 6 6 6 6 6 7 6 6 6 6 6 6 6 7 5 6 6 6 7 7 5 5 6 6 6 5 6 6 6 5 6 5 6 6 5 6 6 6 5 7 5 6 5 5 5 6 6 5 6 6 7 7 6 7 6 6 6 6 6 6 6 7 7 6 6 6 5 6 5 6 7 6 6 6 7 7 6 5 7 7 7 6 7 6 7 6 7 7 7 5 6 7 6 5 6 6 7 6 6 7 6 5 6 6 7 6 6 6 7 5 6 6 6 7 5 6 5 5 5 5 5 6 6 5 5 7 5 6 5 6 5 6 5 5 5 7 5 5 6 6 6 6 6 7 6 6 6 6 7 5 6 7 6 6 6 6 6 6 6 6 6 6 5 5 6 6 6 6 6 7 6 6 6 6 6 6 6 6 6 7 5 5 5 6 5 6 6 6 7 5 7 7 7 7 7 5 6 6 6 6 7 5 5 6 6 6 6 6 6 6 6 6 5 6 6 6 6 6 6 6 6 5 6 6 6 6 6 6 6 6 7 5 6 6 6 6 6 7 6 6 7 6 6 6 7 6 5 5 6 5 5 6 6 5 5 6 6 6 7 6 5 7 5 6 6 7 7 7 7 7 6 7 6 7 5 5 6 6 6 7 7 6 5 6 6 6 6 5 5 6 6 6 6 5 5 5 5 6 6 5 7 6 7 5 6 6 6 6 5 7 7 6 6 6 6 5 5 6 6 7 7 7 7 6 6 7 5 7 6 6 7 7 5 7 7 6 6 7 5 5 6 6 6 5 5 6 7 6 6 6 5 6 5 6 6 5 5 6 6 6 6 7 7 6 5 5 5 6 6 5 6 6 6 6 6 5 5 7 6 5 6 6 5 5 6 6 6 5 5 5 7 7 7 6 6 6 6 7 6 7 6 6 6 6 6 6 5 6 6 6 6 6 7 6 6 6 5 5 6 7 6 7 5 5 6 6 7 6 5 6 5 5 6 6 5 5 5 5 6 6 7 6 5 7 6 6 5 5 6 5 6 5 5 5 4 5 6 5 5 5 5 6 6 6 6 5 6 6 5 6 6 6 6 6 6 5 5 6 6 7 7 6 6 6 6 6 6 6 5 5 5 6 6 6 6 6 5 6 6 6 6 5 5 6 5 5 6 5 5 7 5 5 6 6 5 6 5 5 6 7 6 6 6 7 7 6 6 6 6 6 6 5 5 6 6 5 6 5 7 6 6 6 6 6 7 6 5 5 6 7 7 7 5 6 6 6 6 6 6 6 6 6 6 6 7 5 6 6 5 5 5 5 5 5 5 5 5 5 6 6 6 6 7 6 7 5 7 6 5 6 6 6 6 6 6 5 6 5 7 7 6 6 7 6 6 6 6 6 6 6 7 7 6 5 6 6 6 7 6 6 6 6 6 6 7 6 5 5 5 5 5 5 5 6 5 6 6 5 7 7 6 6 6 6 6 6 7 6 6 6 5 5 6 5 7 6 6 6 7 5 5 7 5 6 6 6 6 6 7 6 5 5 6 6 7 6 7 6 7 7 6 7 7 6 5 6 5 5 5 5 5 7 6 6 6 5 6 6 6 6 6 6 5 6 5 6 6 6 6 6 6 6 6 7 6 6 5 5 6 6 6 6 6 7 7 6 6 6 6 7 7 5 7 7 7 6 6 6 6 6 6 5 6 6 6 6 5 5 5 5 5 5 5 5 6 5 6 6 6 5 6 5 6 5 5 7 7 6 6 6 7 6 6 6 5 6 7 6 5 6 5 7 5 6 6 6 5 6 6 5 6 5 7 5 5 6 6 6 7 6 6 6 6 5 6 6 6 6 6 6 6 6 6 6 6 6 7 6 6 5 5 7 6 5 7 6 7 6 7 6 5 6 6 5 5 5 5 6 6 5 6 6 6 6 6 5 7 7 5 6 6 6 6 6 5 5 7 5 5 6 6 7 7 6 6 6 5 5 7 6 5 5 5 7 6 6 6 7 6 5 5 6 6 6 6 7 7 6 6 6 7 7 5 5 5 6 5 6 5 5 7 6 6 7 7 6 7 6 6 6 6 6 5 6 6 6 5 6 7 6 6 7 7 6 5 7 6 6 6 5 6 7 6 6 6 6 5 6 6 6 6 6 6 5 5 5 5 6 6 6 5 5 6 6 6 7 7 6 6 7 6 6 7 6 6 6 6 7 7 7 5 6 5 6 6 7 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 6 6 7 6 5 6 6 5 6 7 6 6 6 6 6 6 6 6 7 6 7 5 6 6 6 6 6 6 6 7 6 6 7 5 5 5 5 6 5 6 6 7 6 5 6 6 7 7 7 5 6 6 6 6 6 6 6 6 6 5 5 6 5 5 6 6 7 6 7 7 6 6 5 5 5 7 5 7 6 6 6 6 7 6 7 6 7 6 6 7 5 6 6 6 5 6 6 7 6 6 6 7 5 6 5 7 6 6 6 6 5 5 5 5 5 6 5 5 6 7 7 7 5 6 6 5 5 6 5 6 6 6 6 7 7 6 6 6 6 6 6 6 6 6 6 6 5 5 6 6 7 5 6 6 6 7 7 6 6 6 6 6 7 6 5 6 6 6 6 8 5 6 5 5 6 6 7 7 6 6 7 7 6 6 6 6 7 7 6 7 6 6 6 6 6 6 5 6 6 6 6 7 6 5 5 5 5 5 6 6 7 7 6 7 6 5 7 5 5 6 6 7 6 6 6 6 6 6 6 5 6 6 6 6 5 6 6 5 7 7 5 6 7 7 5 6 6 6 6 6 6 6 6 6 6 5 6 6 7 6 5 6 6 6 6 6 6 6 6 5 6 7 6 5 6 5 6 6 7 5 5 6 5 5 5 6 6 7 5 7 6 7 6 6 6 7 5 6 6 5 6 5 5 5 5 5 6 6 5 5 7 7 5 5 6 6 6 6 5 5 7 6`.split(' ').map(Number),
  quality: `6 5 6 6 5 7 6 6 6 5 5 5 5 5 7 6 5 8 6 6 7 8 7 7 5 6 5 6 5 7 7 6 6 8 6 7 5 6 6 5 8 6 8 6 6 8 6 6 8 7 6 7 8 5 8 7 8 7 6 6 6 8 7 6 7 7 6 7 7 6 6 7 7 6 5 7 7 7 6 7 5 6 6 7 6 6 6 7 7 7 5 7 5 7 5 5 6 6 6 6 4 7 5 5 6 6 5 5 6 5 7 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 7 6 6 4 6 5 6 5 6 6 6 6 7 6 6 4 6 6 6 7 5 7 4 7 5 7 6 6 7 7 7 6 6 6 7 5 7 7 7 7 7 6 7 6 6 7 6 7 6 5 5 6 6 6 5 6 6 6 5 6 5 5 7 6 7 7 6 6 7 5 5 5 6 6 6 6 6 6 7 6 7 7 7 6 6 6 6 6 7 6 7 7 5 6 4 6 6 6 6 7 7 8 7 8 8 6 4 6 8 8 7 8 5 7 6 7 8 7 5 6 7 6 5 7 6 8 7 6 7 6 5 5 6 8 7 6 7 7 5 6 7 6 6 5 5 5 6 6 6 6 6 6 5 5 5 6 5 5 4 6 5 6 5 5 7 5 5 7 6 6 7 7 7 5 6 6 5 6 5 6 4 5 6 7 7 7 7 7 7 7 5 6 5 6 7 5 5 5 8 6 5 5 5 6 6 7 5 5 8 5 5 5 6 5 4 6 6 5 5 6 5 6 7 7 5 6 6 5 6 7 5 5 5 6 5 5 6 6 5 6 6 5 5 5 5 6 5 6 5 6 5 5 6 6 3 5 5 5 5 7 5 6 6 6 5 6 6 5 7 6 6 5 6 7 7 5 5 6 5 5 6 6 5 5 6 6 6 7 6 5 6 5 6 5 6 7 6 7 6 6 6 6 6 5 5 6 6 6 7 6 6 5 6 6 6 6 4 5 5 7 5 5 5 4 6 6 5 6 6 6 6 6 6 6 6 5 5 5 6 6 6 6 7 5 5 4 6 6 7 7 7 7 7 7 6 6 7 6 7 7 6 5 7 6 6 5 7 5 5 5 6 5 5 5 6 6 8 4 6 5 6 5 6 6 5 5 6 6 6 6 6 7 5 5 5 5 6 7 5 6 5 5 6 6 6 5 7 7 5 4 6 4 6 6 7 6 6 4 6 7 7 6 7 6 5 7 7 6 7 6 6 6 6 6 6 5 7 7 7 5 7 7 6 6 6 5 6 6 7 6 6 5 6 6 6 7 6 6 6 5 5 6 6 5 4 5 5 6 6 6 6 5 6 6 5 5 5 6 5 6 5 5 5 4 5 5 7 7 7 7 7 6 6 6 7 6 5 7 7 6 5 6 6 6 5 5 6 5 5 8 6 5 6 6 5 6 7 5 4 6 5 6 6 6 6 6 6 5 8 6 6 6 6 6 6 6 6 6 7 6 5 6 5 6 6 5 5 7 7 7 5 6 6 6 5 6 6 6 6 6 6 6 8 7 5 6 6 6 7 5 5 5 5 7 6 5 5 6 6 5 6 5 6 7 6 6 6 6 6 6 7 7 6 7 5 6 6 5 5 5 5 7 7 7 7 7 7 5 5 7 7 8 6 7 7 5 6 5 6 7 6 6 7 5 6 6 6 7 7 5 5 6 6 5 6 5 6 6 6 8 6 5 5 6 6 6 6 5 6 6 6 7 6 6 6 6 4 4 5 5 5 4 6 5 6 6 4 4 7 5 7 7 6 6 6 6 6 6 6 5 5 5 5 7 6 6 7 6 5 5 6 6 6 6 6 6 6 4 5 5 5 5 6 6 6 7 6 6 6 6 7 7 6 5 6 5 6 6 6 6 7 5 4 6 6 5 5 6 6 6 6 5 6 6 5 5 6 5 5 5 6 6 6 6 5 5 6 6 6 6 6 7 6 6 6 5 6 6 7 7 5 7 7 7 5 6 7 6 6 5 5 5 5 5 5 5 8 8 8 8 8 8 8 8 8 6 6 6 6 6 6 7 6 5 6 6 5 6 6 6 5 6 5 6 5 6 6 5 6 5 6 5 6 6 5 5 6 6 5 6 5 6 5 5 6 6 6 6 5 5 6 6 6 4 5 5 5 6 6 5 5 5 5 5 5 6 6 5 5 5 7 6 5 7 5 7 7 7 7 5 5 6 6 6 6 6 6 6 6 6 6 5 6 6 5 6 6 5 6 6 6 6 5 5 5 6 5 5 6 6 6 6 5 6 6 5 5 6 6 5 5 5 7 5 6 6 6 6 5 5 5 5 6 6 6 6 5 5 6 6 6 5 5 5 5 5 6 4 5 6 6 6 6 6 6 6 6 6 6 6 6 5 5 6 6 6 6 7 5 5 6 5 4 5 6 6 6 6 5 6 6 6 6 6 5 5 6 5 6 6 6 6 6 6 6 6 6 5 6 6 6 5 6 5 6 6 5 5 6 6 6 6 5 5 6 6 6 6 6 5 5 6 6 7 6 6 7 7 7 5 5 5 6 6 6 7 7 6 7 7 5 6 7 6 6 6 6 6 6 6 6 6 5 6 6 6 6 6 6 6 6 6 6 7 6 6 6 6 6 6 5 6 7 4 6 5 5 5 5 7 5 7 7 5 6 7 7 6 6 5 6 6 6 7 7 7 6 6 6 6 5 6 5 6 6 6 7 6 6 7 7 7 5 5 5 7 5 7 7 7 7 7 6 6 6 5 6 7 7 6 5 7 7 5 6 5 5 7 7 6 6 7 6 5 4 6 6 6 6 5 4 6 6 6 6 7 5 6 7 7 6 7 6 5 5 6 6 7 6 6 7 6 6 6 7 6 6 6 7 6 6 6 6 6 5 6 6 6 6 6 6 6 6 5 5 6 6 6 6 6 6 7 6 6 5 6 6 5 5 3 6 6 5 6 5 6 7 6 6 6 7 7 6 6 6 6 7 7 6 8 8 7 6 6 6 6 5 7 4 6 6 6 6 4 5 5 6 6 5 7 8 8 5 6 6 6 6 6 5 7 7 6 5 6 7 7 8 7 4 6 6 6 5 6 5 6 7 5 6 7 6 6 6 6 5 6 6 7 5 6 6 6 5 7 6 6 5 6 7 6 5 6 6 4 7 6 6 5 6 5 6 7 6 5 6 5 5 5 6 6 6 6 5 6 6 6 6 7 5 6 6 6 6 6 7 6 5 6 6 6 7 5 4 6 6 6 5 6 5 6 7 7 5 6 6 6 5 6 5 6 7 6`.split(' ').map(Number),
  featureImportance: [
    ['alcohol', 14.248640775720522],
    ['sulphates', 11.807333669492225],
    ['volatile acidity', 11.628464563362554],
    ['density', 9.977932808322997],
    ['total sulfur dioxide', 8.9873792106371084],
    ['chlorides', 8.1545227444793458],
    ['free sulfur dioxide', 7.4739210280468011],
    ['pH', 7.4706910271544276],
    ['citric acid', 7.1382436523357535],
    ['fixed acidity', 6.9202030920748516],
    ['residual sugar', 6.1926674283733423],
  ],
  data: WHITE_WINE_DATA

};


const redWine = {
  predict: `6 7 6 6 6 6 6 7 6 5 6 6 5 7 6 6 6 6 6 5 5 5 6 6 6 6 6 6 7 6 6 7 6 5 6 6 5 6 7 6 6 6 6 6 5 5 5 6 6 6 6 6 6 6 5 5 6 5 6 5 6 6 6 6 5 5 6 7 6 5 5 7 5 7 5 5 5 5 5 6 5 5 6 6 5 6 6 6 5 6 6 6 5 6 6 6 6 5 6 6 6 6 6 5 7 6 5 5 5 7 5 7 5 5 6 6 7 5 6 5 6 5 5 7 5 5 6 5 6 6 6 6 5 5 5 6 6 5 5 6 6 5 5 5 5 6 6 6 7 5 7 7 6 6 5 6 5 7 5 5 6 6 6 6 5 6 6 7 6 5 5 6 6 6 5 6 5 5 6 6 4 6 6 6 6 5 5 5 6 5 5 5 7 5 5 5 5 7 6 5 5 5 6 6 6 6 6 6 6 5 5 5 5 5 5 5 6 5 5 5 6 6 6 6 6 6 6 6 5 5 6 5 6 5 5 5 5 5 6 5 6 6 5 6 5 6 5 5 5 5 5 5 7 5 5 5 5 5 6 5 6 6 5 5 5 5 5 5 5 5 5 6 5 5 5 5 5 5 5 5 6 5 5 6 6 5 6 6 6 6 6 6 6 6 5 6 6 6 6 5 5 5 5 6 6 6 6 6 6 6 6 6 5 6 6 5 5 5 5 6 5 6 5 6 6 5 5 6 5 6 6 6 6 6 5 6 6 5 5 6 6 6 5 6 6 5 5 5 5 5 5 5 7 6 6 5 7 5 7 5 6 5 6 5 6 5 5 5 6 6 6 7 6 6 5 6 6 5 6 5 6 5 5 5 6 6 5 6 6 6 6 6 5 5 5 5 5 6 6 5 5 6 5 6 5 6 6 5 6 5 6 6 5 6 5 6 5 6 6 6 6 6 6 6 6 6 5 6 6 6 6 5 5 6 5 6 6 5 6 5 5 5 5 5 5 5 6 6 5 5 6 6 6 5 6 5 6 6 6 6 6 6 6 6 5 6 6 6 6 6 5 6 6 6 6 6 6 6 6 6`.split(' ').map(Number),
  quality: `5 8 6 6 6 4 7 6 6 5 6 6 5 7 7 7 6 6 6 5 6 6 6 6 6 5 6 6 7 6 6 7 6 5 6 6 5 7 7 6 5 7 6 7 5 5 5 5 7 6 6 6 6 6 6 6 6 4 7 5 6 6 5 6 5 5 6 5 6 5 4 6 5 7 5 6 6 6 6 6 6 6 7 8 5 7 7 7 5 7 7 6 5 6 6 6 6 6 6 6 6 6 6 6 6 6 5 5 5 7 5 6 5 5 4 6 4 6 6 4 4 5 5 6 5 6 5 5 5 6 6 6 5 5 5 5 5 5 6 6 6 5 4 5 4 6 6 6 6 6 8 6 6 5 5 6 6 4 6 6 7 6 6 6 6 5 5 6 5 5 5 5 6 6 4 6 5 5 6 6 3 6 6 6 5 5 5 5 4 5 5 5 6 5 6 6 6 6 6 6 6 5 6 5 7 6 6 6 6 5 6 6 5 6 5 5 6 5 5 5 6 6 6 6 6 5 6 5 5 5 5 5 6 5 5 5 5 5 6 5 6 5 5 6 4 6 5 5 6 6 4 5 6 5 5 3 5 5 6 6 6 6 5 5 5 5 5 5 5 5 5 6 5 5 5 5 6 5 5 7 6 5 5 6 8 6 7 6 6 7 6 6 6 6 5 5 5 5 7 5 5 5 5 6 4 6 6 6 5 5 5 5 6 6 7 6 6 5 5 5 6 7 6 5 5 6 6 5 5 5 8 7 7 7 5 6 6 6 5 5 7 6 4 6 6 5 5 7 4 7 3 5 5 6 5 5 7 5 7 3 5 4 5 4 5 4 5 5 5 5 6 6 5 5 5 7 6 5 6 6 6 5 5 5 6 6 3 6 6 6 5 6 5 6 6 6 6 5 6 5 5 6 4 5 5 6 5 6 6 6 6 6 5 6 5 7 6 6 6 5 5 6 7 6 6 7 6 5 5 5 8 5 5 6 5 6 7 5 6 5 5 5 5 5 5 5 6 6 5 5 6 6 6 5 6 6 6 6 6 6 5 6 5 5 5 7 6 6 6 6 5 6 6 6 6 5 6 6 5 6`.split(' ').map(Number),
  featureImportance: [
    ['alcohol', 12.997634518065146],
    ['volatile acidity', 10.389218227361603],
    ['density', 10.1915942871989],
    ['total sulfur dioxide', 9.647195793591164],
    ['free sulfur dioxide', 9.198200314699832],
    ['chlorides', 9.039396281173039],
    ['residual sugar', 8.624859483473235],
    ['pH', 7.752088726124005],
    ['citric acid', 7.749746364906198],
    ['sulphates', 7.542615142163307],
    ['fixed acidity', 6.867450861243761]
  ],
  data: RED_WINE_DATA,

}


const classifiedWine = {

  score: 0.648148148148,
  predict: `2 3 2 2 1 1 1 3 2 2 3 3 1 2 3 2 2 1 3 2 2 2 1 2 3 2 2 2 1 3 1 2 3 1 2 2 3 2 1 3 2 2 2 2 2 1 3 2 3 2 3 3 2 3`.split(' ').map(Number),
  quality: `1 3 2 1 2 2 1 3 2 2 3 3 1 2 3 2 1 1 2 1 2 1 1 2 2 2 2 2 2 3 1 1 2 1 1 1 3 2 2 3 1 1 2 2 2 1 3 2 3 1 3 3 1 3`.split(' ').map(Number),
  featureImportance: [

    ['OD280/OD315 of diluted wines', 17.289768556532511],
    ['Total phenols', 15.82412355172843],
    ['Class label', 15.566980447550268],
    ['Proanthocyanins', 11.022804509831062],
    ['Hue', 9.1409737222780603],
    ['Color intensity', 7.5798508442875061],
    ['Alcalinity of ash', 5.4066026031522769],
    ['Magnesium', 4.8272731358465615],
    ['Alcohol', 4.0190193475760578],
    ['Nonflavanoid phenols', 2.8799547133208443],
    ['Malic acid', 2.792417716260597],
    ['Ash', 2.0850987655665629],
    ['Flavanoids', 1.5651320860692497],

  ],
  data: WINE_CLASSIFY,
}


@Injectable()
export class WineService {

  constructor() {
  }


  public getWineData(wine: string = 'white'): Promise<any> {

    return this.setupData(wine);
  }

  private splitTestData(WINE) {

    const split = .7 * WINE.data.length;

    const testData = WINE.data.slice(0, split);


    const trainData = WINE.data.slice(split);


    return {
      split,
      testData,
      trainData,
    };
  }

  private setupData(wine: string = 'white'): Promise<any> {


    return new Promise((resolve, reject) => {


      let WINE;

      if (wine === 'white') {

        WINE = whiteWine;
      } else if (wine === 'red') {

        WINE = redWine;
      } else if (wine === 'classify') {

        WINE = classifiedWine;
      }

      let count: number = 0;


      const url = `http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-${wine}.csv`;


      let {split, trainData, testData} = this.splitTestData(WINE);


      if (wine !== 'classify') {

        trainData = this.mapToQuality(trainData, WINE);
      } else {

        trainData = this.mapToClassifyRegion(trainData, WINE);
      }


      trainData.forEach((q, i) => {
        if (q.prediction === WINE.quality[i]) {

          count++;
        }
      });

      const avg = count / WINE.quality.length;

      resolve({
        avg,
        testData,
        trainData,
        url,
        featureImportance: WINE.featureImportance,
      });

    })


  }

  private mapToQuality(trainData, WINE) {

    return trainData.map((i, idx) =>
      Object.assign(i, {quality: Number(i.quality), prediction: Number(WINE.predict[idx])}))


  }

  private mapToClassifyRegion(trainData, WINE) {

    return trainData.map((i, idx) =>
      Object.assign(i, {"Class label": Number(i["Class label"]), prediction: Number(WINE.predict[idx])}))


  }


}
